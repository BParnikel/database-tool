package com.parnikel.ataccama;

import com.parnikel.ataccama.model.column.Column;
import com.parnikel.ataccama.model.column.ColumnStatistics;
import com.parnikel.ataccama.model.database.DatabaseDto;
import com.parnikel.ataccama.model.database.Database;
import lombok.SneakyThrows;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.test.annotation.DirtiesContext;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.*;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest(
        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
        properties = {
                "spring.datasource.url=jdbc:postgresql://localhost:5432/test-ataccama",
                "spring.jpa.hibernate.ddl-auto=create-drop"
        }
)
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
class ApplicationTest {
    @LocalServerPort
    private int port;
    @Autowired
    private TestRestTemplate restTemplate;

    @SneakyThrows
    @AfterAll
    public static void cleanUp() {
        Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/", "postgres", "postgres");
        Statement statement = connection.createStatement();
        statement.execute("DROP DATABASE testdb1");
    }

    @Test
    @SneakyThrows
    public void integrationTest() {
        Connection localPostgresConnection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/", "postgres", "postgres");
        Statement statement = localPostgresConnection.createStatement();
        statement.execute("CREATE DATABASE testdb1");

        Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/testdb1", "postgres", "postgres");
        Statement statement1 = connection.createStatement();
        statement1.execute("CREATE SCHEMA test_schema1");

        Connection schemaConnection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/testdb1?currentSchema=test_schema1", "postgres", "postgres");
        Statement statement2 = schemaConnection.createStatement();
        statement2.execute("CREATE TABLE users (id int8 generated by default as identity, name varchar, age integer, salary double precision)");
        statement2.execute("INSERT INTO users (name, age, salary) VALUES ('John', 30, 10000)");
        statement2.execute("INSERT INTO users (name, age, salary) VALUES ('Joe', 50, null)");

        // Initial state
        List<Database> initialList = this.restTemplate.getForObject("http://localhost:" + port + "/databases", List.class);
        assertThat(initialList, empty());

        // Add database
        DatabaseDto databaseDto = buildDatabase("127.0.0.1", 5432, "testdb1", "test_schema1", "postgres", "postgres");
        Database entry = this.restTemplate.postForObject("http://localhost:" + port + "/databases", databaseDto, Database.class);
        assertEquals(1, entry.getId());

        List<Database> listAfterAddition = this.restTemplate.getForObject("http://localhost:" + port + "/databases", List.class);
        assertThat(listAfterAddition, hasSize(1));

        // Schemas
        List<String> schemas = this.restTemplate.getForObject("http://localhost:" + port + "/databases/1/schemas", List.class);
        assertThat(schemas, hasItem("test_schema1"));

        // Tables
        List<String> tables = this.restTemplate.getForObject("http://localhost:" + port + "/databases/1/tables", List.class);
        assertThat(tables, contains("users"));

        // Columns
        Column[] columns = this.restTemplate.getForObject("http://localhost:" + port + "/databases/1/columns?tableName=users", Column[].class);
        Column idColumn = new Column("id", "bigint", false, true);
        Column nameColumn = new Column("name", "character varying", true, false);
        Column ageColumn = new Column("age", "integer", true, false);
        Column salaryColumn = new Column("salary", "double precision", true, false);
        assertThat(columns, arrayContainingInAnyOrder(idColumn, nameColumn, ageColumn, salaryColumn));

        // Data preview
        List<Map<String, Object>> rows = this.restTemplate.getForObject("http://localhost:" + port + "/databases/1/data-preview?tableName=users", List.class);
        assertThat(rows, contains(hasEntry("name", "John"), hasEntry("name", "Joe")));

        // Statistics
        ColumnStatistics[] columnStatistics = this.restTemplate.getForObject("http://localhost:" + port + "/databases/1/statistics?tableName=users", ColumnStatistics[].class);
        ColumnStatistics ageStatistics = new ColumnStatistics("age", 40., 50., 30.);
        ColumnStatistics salaryStatistics = new ColumnStatistics("salary", 10000., 10000., 10000.);
        assertThat(columnStatistics, arrayContainingInAnyOrder(ageStatistics, salaryStatistics));
    }

    @SuppressWarnings("SameParameterValue")
    private DatabaseDto buildDatabase(String host, int port, String database, String schema, String username, String password) {
        DatabaseDto databaseDto = new DatabaseDto();
        databaseDto.setHost(host);
        databaseDto.setPort(port);
        databaseDto.setDatabase(database);
        databaseDto.setSchema(schema);
        databaseDto.setUsername(username);
        databaseDto.setPassword(password);
        return databaseDto;
    }
}